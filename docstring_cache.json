{
  "itms_manager.give_item_reward": " gives a random item to the player, based on what is missing from their inventory.\n\nThe function `give_item_reward` takes in a number `num_of_items` (which defaults to 1 if no value is provided) and uses that number to decide how many items to give to the player.\n\nThe function starts by creating a table `prior` which holds item priorities. A higher priority means the item is more likely to be given to the player. The default priorities are:\n\n```lua\r\n{\r\n\t[\"health\"] = 2,\r\n\t[\"rad\"] = 2,\r\n\t[\"drink\"] = 2,\r\n\t[\"food\"] = 2,\r\n\t[\"ammo\"] = 2,\r\n\t[\"battery\"] = 0,\r\n}\r\n```\r\n\r\nThe function then loops through the player's inventory and runs some checks on each item.\r\n\r\nIf the item is a medkit, the priority for `\"health\"` items is decreased by 1.\r\n\r\nIf the item is an anti-rad, the priority for `\"rad\"` items is decreased by 1.\r\n\r\nIf the item is a drink, the priority for `\"drink\"` items is decreased by 1.\r\n\r\nIf the item is food, the priority for `\"food\"` items is decreased by 1",
  "itms_manager.actor_on_item_before_use": "Is used to check whether an item can be used, and if not, return an error message. It checks the period, rad_boost, psy_boost, bld_boost, hp_boost, and pwr_boost of the item, as well as whether the required_tool is missing. If any of these conditions are not met, it will print an error message and return false. Otherwise, it will return true.",
  "itms_manager.actor_on_first_update": "Deletes the base pda, deletes animation items on the actor, spawns bolts, and damage equipment.",
  "itms_manager.actor_on_item_drop": ":\n- first checks if an object exists \n- checks if the player has made a wish for riches\n- if they have, it gives the object to them\n- otherwise, it saves the item to the `strapped_items` key in the database",
  "itms_manager.actor_on_item_use": "Allows the actor to use an item, and defines what should happen when the item is used. If the actor has already made a wish for riches, nothing happens. Otherwise, the game checks what kind of item is being used.\n\nFor example, if the item is the notes left by Strelok, the game opens the route to Val. If the item is a deployable machine gun, the game starts a function to deploy the machine gun. If the item is a watch, the game starts a function to use the watch. If the item is a chocolate bar, the game creates a new chocolate bar item in the actor's inventory. If the item is a pack of bolts, the game creates 20-30 bolt items in the actor's inventory over a period of 5 seconds.",
  "itms_manager.actor_on_item_take": "Handles an item being taken by the player.\n\n- If the item is a weapon and the player has a strapped item, the strapped item is replaced by the new weapon.\n- If the item is an explosive barrel, a jerry can of fuel is created.\n- If the item is the story quest case, and the player doesn't have the relevant info, the player is given the info and a squad of bloodsuckers is spawned.\n- A notification is shown to the player.",
  "itms_manager.save_state": "Will save the state of an `m_data` object. The `m_data` object represents data about an entity in the game. This function will save the state of the `bolts` and `bolt_slot` variables in the `m_data` object.\n\nThe `bolts` variable is an array of objects. Each object represents a bolt in the game. The `bolt_slot` variable represents the slot in the inventory that the bolt is in.",
  "itms_manager.menu_unpack": "Returns a menu item name for the menu category \"st_item_unpack\". It does this by checking if the item has a parent and that parent's ID is equal to AC_ID. If so, it returns a translated version of the string \"st_item_unpack\".",
  "itms_manager.menu_play": "Returns the `Play` name for the menu.",
  "itms_manager.menu_place": "Is responsible for returning the \"Place\" name for an object. The name is based on the translation string \"st_item_place\". By looking up the translation string, the function returns the value in the current language that corresponds to \"st_item_place\".",
  "itms_manager.use_deployable_mgun": "First creates a `vector`, `pos`, and sets it to the current camera position. It then adds the camera direction to that position, `pos:add(device().cam_dir:mul(3))`, and finally creates a `deployable_mgun` object at that position.",
  "itms_manager.use_guitar": "Uses a random number (n) to select a guitar sound file. It then stores the length of the sound file as a variable (period), and plays the sound.",
  "itms_manager.use_harmonica": "Chooses a random number from 1-5, opens a sound object of a harmonica playing with that number, and plays the sound object. If the sound object does not exist, the function does nothing and returns. The function also plays a continuous actor effect for the duration of the harmonica playing.",
  "itms_manager.use_arty_container": "Breaks apart an artefact container into the actual artefact and Lead box/AF Ammo/whatever, depending on the container type.",
  "itms_manager.use_watch": "Prints the current game.get_game_time() in a more readable format. It returns the hour, minute, and phase of day. Then it formats the minutes properly by adding a 0 in front if the minute is less than 10. Finally, it prints all of this information to the screen.",
  "itms_manager.use_place": "Allows the user to place an object in front of the camera. Given an object input, the function checks if the object has a parent and if the parent is the AC (Actor Controller). If so, the function gets the object's section, releases the object's ID, sets up a position for the object, creates the object in the game, and finally sets the object's angle to the angle of the camera.",
  "itms_manager.actor_item_take": "Is the `on_item_take`Lua script handler for the `bind_stalker` property. When an actor with the `bind_stalker` property takes an item, this function is called. The handler gets the `obj` parameter, which is the item taken.",
  "itms_manager.npc_on_item_take_from_box": "Is automatically called when a player takes an item from an object.\n\n- The `npc` parameter is the NPC that the player took the item from.\n- The `box` parameter is the object that the player took the item from.\n- The `item` parameter is the item that the player took.",
  "itms_manager.new_game_equippment": "Changes the condition of any weapon, outfit, headgear or item devices in the inventory to be between 75% and 85%. It also changes the autosave to the name of the user and overrides the ammo type if required.",
  "itms_manager.bolt_manager": "Limits the number of bolts an actor can have in their inventory to a set amount, as defined in the `bolt_max_num` setting. Every 60 game seconds, the function iterates over every object in the actor's inventory. If the object is a `bolt` or `bolt_bullet`, the counter `cnt` is incremented. If `cnt` is greater than the `bolt_max_num`, the extra object is removed from the game.",
  "itms_manager.send_itm_msg": "Defines what happens when an item is taken in the game. The message \"st_item_taken\" is retrieved and formatted to include the name of the security taking the item. This message is then displayed to the player.",
  "itms_manager.relocate_item_from_actor": "Removes items from an actor, either despawning them or transferring them to an NPC.\n\nFor each item in the actor's inventory:\n\n- if the item is the desired type (as indicated by the `section` parameter):\n- remove either 1 or the number of remaining uses of the item, whichever is less (if the item is \"multiuse\", otherwise just remove 1)\n- if there is an NPC specified:\n  - transfer the item to the NPC\n- otherwise:\n  - despawn the item\n  \nIf the number of items remaining of the desired type is less than what was requested, print an error message.\n\nFor each item removed, send a message to the news manager indicating that the item was removed.",
  "itms_manager.play_item_sound": "Will play a sound that is associated with the item that is provided as a parameter. The function will first check to see if there is a sound type assigned to the item, and if so, will retrieve the sound file name(s) associated with that type. If there is more than one sound file name, the function will randomly select one. The function will then create a sound object using the selected file name and play the sound. The function includes a check to ensure that the sound is not played more often than once every 25 milliseconds.",
  "itms_manager.get_item_processor": "Defines a new function `get_item_processor()`. This function will serve as a constructor for a new `ItemProcessor` object, and will return an instance of this object. The `get_item_processor()` function makes sure that only one instance of `ItemProcessor` is ever created, by checking if a variable `c_instance` is set to `nil` before creating a new object. \n\n \n\nGenerated: This function returns an instance of the `ItemProcessor` class.",
  "itms_manager.ItemProcessor.ItemProcessor:__init": "Initializes the ItemProcessor. It sets some variables, the Remove, Cond, Uses and Ammo tables, to empty. It also sets the Debug and Cycles variables.",
  "itms_manager.ItemProcessor.ItemProcessor:update": "Goes through each item in the player's inventory and updates its condition, uses and ammo. If the player doesn't have an item in their inventory, it will be removed from the ItemProcessor.",
  "itms_manager.ItemProcessor.ItemProcessor:Create_Item": "Creates an object and processes it as either a multiuse or degradable item. \n\nFirst, it called the [`Create_Item`](#create_item) function from the `ItemProcessor` class. This function takes in arguments for the `section`, `owner`, and `t` tables. `section` is a string that contains the name of the object being created. `owner` is the owner of the object being created and defaults to `nil`. `t` is a table of properties and values of the object being created and defaults to `nil`.\n\nNext, the function passes the `section` string to the [`Extract_Uses`](#extract_uses) function and saves the string returned in `section`. The `uses` table is then populated with the number of uses for the object being created.\n\nThe [`Extract_Uses`](#extract_uses) function does two things. First, it checks the `section` string for a number of uses for the object being created. If one is found, it is saved in the `uses` table. Second, it removes the number of uses from the `section` string and returns the updated string.\n\nThe function then checks if the `section` exists. If it does, it attempts to create the object. If the `owner` is set, the position, level vertex ID, game vertex ID, and",
  "itms_manager.ItemProcessor.ItemProcessor:Process_Item": "Processes an item in the passed section with the given id. \n\n-If the item exists (as indicated by the parameter t): \n-Uses: If the item has uses, it is added to the `Uses` table.\n-Cond: If the item has a condition, it is added to the `Cond` table.\n-Ammo: If the item has ammo, it is added to the `Ammo` table.\n-Debug: If debug mode is on, a message is printed.",
  "itms_manager.ItemProcessor.ItemProcessor:Remove_Process": "Removes an object from the game after a specified number of cycles.",
  "itms_manager.ItemProcessor.ItemProcessor:Random_Choice": "Takes a table of items as an argument, then randomly chooses one item from the table and returns it.",
  "itms_manager.ItemProcessor.ItemProcessor:Random_Condition": "Generates a random number condition with two parameters, arg[1] and arg[2]. If arg and (#arg > 0) are both true, then the function will return a random number between arg[1] and arg[2].",
  "itms_manager.ItemProcessor.ItemProcessor:Extract_Uses": "Takes in a section data (sec_d) and returns  the section name and number of uses if they both exist. It does this by using string_find to look for patterns in sec_d that match the section name and number of uses. If it finds these patterns and they can both be turned into numbers, it will return the section name and number of uses. If not, it will just return the section data.",
  "itms_manager.generate_boosters_list": "Takes the information from the \"booster_stats.ltx\" file and creates a list of boosters in the \"temp\" section of the config file. The list includes the cost, number of uses, duration, and any effects of the booster.",
  "itms_manager.ActorMenu_on_item_focus_receive": "Highlights the compatible items in the inventory (compatible means the items that can be used with or complement the item obj that is highlighted). The purpose is to make it easier for the user to see what alternatives there are to the item currently highlighted.\n\nThe function starts by checking that the object highlighted is actually in the ActorMenu (this is the menu that appears when you open your inventory). If not, the function returns.\n\nThen, the function initializes a table called focus_tbl, which it will use to store the names of the items that are compatible with the item currently highlighted. The function also initializes a variable called focus_last_sec, which it will use to keep track of the last item highlighted. This is important because the function only needs to recalculate the compatible items when the user highlights a new item (not when they highlight the same item again).\n\nNext, the function calculates the compatible items. For weapons, this includesammo, scopes, silencers, and grenade launchers. For all items, this includes parts and repair kits. The function then highlights all the compatible items in the inventory menu.",
  "itms_manager.use_package_random": "Uses a package's random contents.\n\nThis function uses the `package_content` INI key to determine which contents\nto use. It then randomly selects some of those contents (up to six), and\ndelays an event to use those contents."
}